#!/bin/ksh

#-------------------------------
# setting options for SLURM
#-------------------------------
# Options that are specified within the script file should precede the
# first executable shell command in the file. 
# All options, which are case sensitive, are preceded by #SBATCH. 
# These lines become active only when the script is submitted
# using the "sbatch" command. 
# All job output is written to the workdir directory, by default. 
 
 
##SBATCH --qos=normal
 
        # Specifies that your job will run in the queue (Quality Of
        # Service) normal, which, if this option is not specified, is
        # the default.
 
#SBATCH --job-name=ERA5_11-12
 
        # Assigns the specified name to the request
 
#SBATCH --output=ERA5_11-12.%N.%j.out
 
        # Specifies the name and location of STDOUT where %N is the
        # node where the job runs and %j the job-id. The file will be 
        # written in the workdir directory if it is a relative path.
        # If not given, the default is slurm-%j.out in the workdir.
 
#SBATCH --error=ERA5_11-12.%N.%j.err
 
        # Specifies the name and location of STDERR where %N is the
        # node where the job runs and %j the job-id. The file will be 
        # written in the workdir directory if it is a relative path. 
        # If not specified, STDERR will be written to the output file 
        # defined above, or otherwise to slurm-%j.out in the workdir. 
 
##SBATCH --workdir=/scratch/ms/...
 
        # Sets the working directory of the batch script before it is
        # executed.
 
##SBATCH --mail-type=FAIL
         
        # Specifies that an email should be sent in case the job fails.
        # Other options include BEGIN, END, REQUEUE and ALL (any state
        # change).
 
#SBATCH --time=23:59:00
 
        # Specifies that your job my run up to HH:MM:SS of wall clock
        # time. The job will be killed if it exceeds this limit. If
        # time is not defined, the default limit for the queue (qos)
        # will be used.
 
 
#-------------------------------
# setting environment variables
#-------------------------------
 
export PATH=$PATH:.             # Allows you to run any of your programs or
                                # scripts held in the current directory (not 
                                # required if already done in your .user_profile 
                                # or .user_kshrc) 

set -xv

echo "--- export global paths and load environment"
# NWR 20200624
# Point via absolut path. This way there is no confusion with the path
# as well as every script used the same 'export_paths.ksh' and I dont
# need to copy this files to every root folder. 
. /home/ms/spde/de5s/ctrlFC/export_paths.ksh
if [[ $? != 0 ]] ; then
    echo "SOMETHING WENT WRONG while sourcing environment !"
    exit 1
fi

# set $SCRATCH as working dir
# Do not use $SCRATCHDIR, becaus JURECA/JUDAC can be offline during file transfering. 
# In this case the retrieval needs to be computed again. Instead, use $SCRATCH and 
# remove all files older than X days. By doing so, grib data can be easily downloaded 
# from ECMWF machine after maintance/problems on JURECA/JUDAC.
cd $CTRL_ICBCERA5

#--------------------------------------------------------------------
# Set up the DATE and TIME
#--------------------------------------------------------------------
year=1980
for month in 11 12; do # 01 02 03 04 05 06 07 08 09 10 11 12
  if [ "$month" -eq "01" ] || [ "$month" -eq "03" ] || [ "$month" -eq "05" ] || [ "$month" -eq "07" ] || [ "$month" -eq "08" ] || [ "$month" -eq "10" ] || [ "$month" -eq "12" ]
  then
    numDays=30; echo $numDays
    #numDays=31; echo $numDays
  elif [ "$month" -eq "04" ] || [ "$month" -eq "06" ] || [ "$month" -eq "09" ] || [ "$month" -eq "11" ]
  then
    numDays=29; echo $numDays
    #numDays=30; echo $numDays
  elif [ "$month" -eq "02" ]
  then
    numDays=27; echo $numDays
    #numDays=28; echo $numDays
  fi


  START_DATE=${year}${month}01
  END_DATE=`date -d "${START_DATE} + ${numDays} day" +%Y%m%d`
  TIME="0000/0300/0600/0900/1200/1500/1800/2100"
  Step=00

  echo "START_DATE for request: $START_DATE"
  echo "END_DATE for request: $END_DATE"
  echo "TIME for request: $TIME"

  # Define the filename
  #   target_filename: filename to send to JURECA
  #   filename: filename to (temporary) save on $SCRATCH
  target_filename="ERA5_EU11_${START_DATE}-${END_DATE}.03h.030D.boundary"
  filename="${target_filename}"

  #--------------------------------------------------------------------
  # define the actual MARS request
  #--------------------------------------------------------------------

cat > mars_request <<EOF
retrieve, # retrive param on pl level
	target = "${filename}.grib",
	#target = "${filename}_pl.grib",
    class = ea,
    dataset = era5,
	stream = oper,
	expver = 1,
	type = an,
	#date = ${START_DATE},
	date = ${START_DATE}/to/${END_DATE},
	time = ${TIME},
    area = 79.8/-54.9/10.2/75.0, # north/west/south/east
    # Parts of the output is in grib1
    # so ECMWF recomend to use 3digits only:
    # https://confluence.ecmwf.int/display/CKB/ERA5%3A+What+is+the+spatial+reference
    # to match meteocloud grid (JSC) we use 0.3degree
	grid = 0.3/0.3,
	#step = ${Step},
	levtype = pl,
    levelist = 200,
	param = z
retrieve,
	#target = "${filename}_sfc.grib",
    levtype = sfc,
    levelist = off,
    param = skt/stl1/stl2/stl3/stl4/swvl1/swvl2/swvl3/swvl4/sd/ci/src/tsn/istl1
retrieve,
    levtype = sfc,
    param = sp
retrival,
	#target = "${filename}_ml.grib",
    levtype = ml,
    levelist = 1/to/137,
    param = t/q/u/v/clwc/ciwc
EOF
  mars mars_request # start request
  if [ $? != 0 ]                          # Check MARS exit code. 
  then
    echo "--- The MARS request failed."
    exit 1
  fi
  ksh ${CTRL_TRANSFER}/transfer_genericSFTP_remove.ksh AGROCLUSTER_ERA5 $(pwd)/${filename}.grib
  #ksh ${CTRL_TRANSFER}/transfer_genericSFTP.ksh AGROCLUSTER_ERA5 $(pwd)/${filename}_*.grib
  if [ $? != 0 ]  # Check scp exit code. 
  then
    echo "--- The data transfere failed."
    exit 1
  fi

done

exit 0
